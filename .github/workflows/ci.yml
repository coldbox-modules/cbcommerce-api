name: cbCommerce API CI

# Only on Development we build snapshots
on:
  push:
    branches:
      - development
      - main

env:
  MODULE_ID: cbcommerce-api

jobs:
  #############################################
  # Tests First baby! We fail, no build :(
  #############################################
  tests:
    name: Tests
    runs-on: ubuntu-20.04
    env:
      MYSQL_DATABASE: cbcommerce
      MYSQL_USER: cbcommerce
      MYSQL_PASSWORD: "c6C0mm3rc3!"
      MYSQL_ROOT_PASSWORD: "c6C0mm3rc3!"
      DB_CLASS: com.mysql.jdbc.Driver
    strategy:
      fail-fast: false
      matrix:
        cfengine: [ "lucee5", "adobe2018", "adobe2021" ]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup Database
        run: |
            docker run -d -p "3306:3306" --expose 3306 --name mariadb -e 'MYSQL_DATABASE=${{env.MYSQL_DATABASE}}' -e 'MYSQL_USER=${{env.MYSQL_USER}}' -e 'MYSQL_PASSWORD=${{env.MYSQL_PASSWORD}}' -e 'MYSQL_ROOT_PASSWORD=${{env.MYSQL_ROOT_PASSWORD}}' mariadb

      - name: Setup CommandBox CLI
        uses: Ortus-Solutions/setup-commandbox@v2.0.1

      - name: Setup .env For Runner
        run: |
          touch test-harness/.env
          printf "ENVIRONMENT=development\n" >> test-harness/.env
          printf "DB_HOST=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' mariadb)\n" >> test-harness/.env
          printf "DB_DATABASE=${{env.MYSQL_DATABASE}}\n" >> test-harness/.env
          printf "DB_USER=${{ env.MYSQL_USER }}\n" >> test-harness/.env
          printf "DB_USERNAME=${{ env.MYSQL_USER }}\n" >> test-harness/.env
          printf "DB_PASSWORD=${{ env.MYSQL_PASSWORD }}\n" >> test-harness/.env
          printf "DB_CLASS=${{ env.DB_CLASS }}\n" >> test-harness/.env
          printf "STRIPE_API_KEY=${{ secrets.STRIPE_API_KEY }}\n" >> test-harness/.env
          printf "STRIPE_PUBLISHABLE_KEY=${{ secrets.STRIPE_PUBLISHABLE_KEY }}\n" >> test-harness/.env

      - name: Cache CommandBox Dependencies
        uses: actions/cache@v1
        if: ${{ true }}
        with:
          path: ~/.CommandBox/artifacts
          key: ${{ runner.OS }}-commandbox-cache-${{ hashFiles( 'box.json' ) }}-${{ hashFiles( 'modules/cbcommerce-api/box.json' ) }}
          restore-keys: |
            ${{ runner.OS }}-commandbox-cache-${{ hashFiles( 'box.json' ) }}-${{ hashFiles( 'modules/cbcommerce-api/box.json' ) }}

      - name: Install Dependencies
        run: |
          box run-script harness:install

      - name: Start ${{ matrix.cfengine }} Server
        run: |
          # Startup the Server
          docker run -d -p "8080:8080" --name app  -v ${GITHUB_WORKSPACE}/test-harness:/app -v ${GITHUB_WORKSPACE}:/app/modules/cbcommerce -v ${GITHUB_WORKSPACE}/build:/app/modules/cbcommerce/test-harness ortussolutions/commandbox:${{matrix.cfengine}}
          if [[ "${{ matrix.cfengine }}" == "adobe2021" ]] ; then
            docker exec app /bin/sh -c "cd /app && box cfpm install zip,mysql,document,feed"
          fi
          sleep 60
          curl http://127.0.0.1:8080?seed=true

      - name: Run Tests
        run: |
          mkdir -p ${GITHUB_WORKSPACE}/test-harness/tests/results/web
          box package set testbox.runner="http://127.0.0.1:8080/tests/runner.cfm?seed=true"
          box testbox run --verbose outputFile=test-harness/tests/results/web/test-results outputFormats=json,antjunit

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          files: test-harness/tests/results/**/*.xml
          check_name: "${{ matrix.cfengine }} Test Results"

      - name: Upload Test Results Artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: cbcommerce-api-test-results-${{ matrix.cfengine }}
          path: |
            test-harness/tests/results/**/*

      - name: Failure Debugging Info
        if: ${{ failure() }}
        run: |
          docker logs app

  #############################################
  # Build cbCommerce
  #############################################
  build:
    name: Build & Publish
    needs: tests
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: "adopt"
          java-version: "11"

      - name: Setup CommandBox
        uses: Ortus-Solutions/setup-commandbox@main
        with:
          forgeboxAPIKey: ${{ secrets.FORGEBOX_TOKEN }}

      - name: Setup Environment Variables For Build Process
        id: current_version
        run: |
          echo "VERSION=`cat box.json | jq '.version' -r`" >> $GITHUB_ENV
          box package set version=@build.version@+@build.number@
          # master or snapshot
          echo "Github Ref is $GITHUB_REF"
          echo "BRANCH=master" >> $GITHUB_ENV
          if [ $GITHUB_REF == 'refs/heads/development' ]
          then
            echo "BRANCH=development" >> $GITHUB_ENV
          fi
      - name: Build ${{ env.MODULE_ID }}
        run: |
          box install commandbox-docbox
          box task run taskfile=build/Build target=run :version=${{ env.VERSION }} :projectName=${{ env.MODULE_ID }} :buildID=${{ github.run_number }} :branch=${{ env.BRANCH }}
      - name: Upload Build Artifacts
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.MODULE_ID }}
          path: |
            .artifacts/**/*
      - name: Upload Binaries to S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read
        env:
          AWS_S3_BUCKET: "downloads.ortussolutions.com"
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESS_SECRET }}
          SOURCE_DIR: ".artifacts/${{ env.MODULE_ID }}"
          DEST_DIR: "ortussolutions/coldbox-modules/${{ env.MODULE_ID }}"

      - name: Upload API Docs to S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read
        env:
          AWS_S3_BUCKET: "apidocs.ortussolutions.com"
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESS_SECRET }}
          SOURCE_DIR: ".tmp/apidocs"
          DEST_DIR: "coldbox-modules/${{ env.MODULE_ID }}/${{ env.VERSION }}"

      - name: Publish To ForgeBox
        run: |
          cd .tmp/${{ env.MODULE_ID }}
          cat box.json
          box forgebox publish
      - name: Inform Slack
        if: ${{ always() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: coding
          SLACK_COLOR: ${{ job.status }} # or a specific color like 'green' or '#ff00ff'
          SLACK_ICON_EMOJI: ":bell:"
          SLACK_MESSAGE: '${{ env.MODULE_ID }} Built with ${{ job.status }}!'
          SLACK_TITLE: "${{ env.MODULE_ID }} Build"
          SLACK_USERNAME: CI
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}